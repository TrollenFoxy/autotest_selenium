stages:
  - test
  - history_job
  - reports
  - deploy


variables:
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  IMAGE: '${ART_REGISTRY}/cash/${CI_PROJECT_NAME}'
  BASE_IMAGE_VERSION: 1.0.0


base-image:
  stage: test
  when: manual
  image: docker:dind

  before_script:
    - docker login -u $ART_USERNAME -p $ART_TOKEN $ART_REGISTRY

  script:
    - DOCKER_BUILDKIT=1 docker build --ssh default --no-cache -t $IMAGE:base-$BASE_IMAGE_VERSION -f Dockerfile .
    - docker push $IMAGE:base-$BASE_IMAGE_VERSION

test_front_auth:
  stage: test
  image: $IMAGE:base-$BASE_IMAGE_VERSION

  script:
    - py.test -v --alluredir=./allure-results front_test/test_auth.py

  allow_failure: true
  artifacts:
    when: always
    paths:
      - ./allure-results
    expire_in: 1 day

test_front_landing:
  stage: test
  image: $IMAGE:base-$BASE_IMAGE_VERSION

  script:
    - py.test -v --alluredir=./allure-results front_test/test_landing.py

  allow_failure: true
  artifacts:
    when: always
    paths:
      - ./allure-results
    expire_in: 1 day

test_front_reg:
  stage: test
  image: $IMAGE:base-$BASE_IMAGE_VERSION

  script:
    - py.test -v --alluredir=./allure-results front_test/test_reg.py

  allow_failure: true
  artifacts:
    when: always
    paths:
      - ./allure-results
    expire_in: 1 day

test_front_replenishment_of_funds:
  stage: test
  image: $IMAGE:base-$BASE_IMAGE_VERSION

  script:
    - py.test -v --alluredir=./allure-results front_test/test_replenishment_of_funds.py

  allow_failure: true
  artifacts:
    when: always
    paths:
      - ./allure-results
    expire_in: 1 day

history_job:
  stage: history_job
  image: storytel/alpine-bash-curl

  script:
    #- 'curl -v --user $ART_USERNAME:$ART_TOKEN --upload-file ./artifacts.zip https://$ART_REGISTRY/repository/maven-ds/kyc/testing/artifacts.zip'
    - 'curl -v --user $ART_USERNAME:$ART_TOKEN --output ./$CI_JOB_ID.zip https://$ART_REGISTRY/repository/maven-ds/project/testing/$CI_JOB_ID.zip'
    - apk add unzip
    - unzip $CI_JOB_ID.zip
    - chmod -R 777 public
    - cp -r ./public/history ./allure-results
  allow_failure: true
  artifacts:
    paths:
      - ./allure-results
    expire_in: 1 day
  rules:
    - when: always

allure_job:
  stage: reports

  image: frankescobar/allure-docker-service
  script:
    - allure generate -c ./allure-results -o ./allure-report
  artifacts:
    paths:
      - ./allure-results # Примонтируем две этих директории для получения результатов тестирования и генерации отчетов соответственно
      - ./allure-report
    expire_in: 1 day
  rules:
    - when: always


pages:
  stage: deploy

  script:
    - mkdir public # Создаем папку public. По умолчанию гитлаб хостит в gitlab pages только из папки public
    - mv ./allure-report/* public # Перемещаем в папку public сгенерированный отчет.

  artifacts:
    paths:
      - public
  rules:
    - when: always
